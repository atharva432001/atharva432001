#include<iostream>

#include<map>

#include<queue>

#include<list>

using namespace std;

template <typename T>  /*generic type , template class

                        to work with graph of integers or variables */

class Graph{

  map<T, list<T>> l;    //map<int,list<int>> // 2->(1,0,3)

public:

  void addEdge(int x, int y){ //edges are bi-directional //Adds a new element at the end of the vector, after its current last element

    l[x].push_back(y);

    l[y].push_back(x);

  }

  void bfs(T src){

    map<T,int> visited;    //we created visited array

    queue<T> q;

    q.push(src);

    visited[src]=true;

    while(!q.empty()){

      T node = q.front();

      q.pop();

      cout<<node<<" ";

      for(int nbr : l[node])

        {

          if(!visited[nbr]){

            q.push(nbr);

            //mark that nbr as visited

            visited[nbr]= true;

            

          }

        }

    }

    

  }

};

int main()

{

  Graph<int> g;

  g.addEdge(0,1);

  g.addEdge(1,2);

  g.addEdge(2,3);

  g.addEdge(3,4);

  g.addEdge(4,5);

  g.bfs(0);

  return 0;

}
